datasource db {
    provider = "sqlite"
    url      = "file:../data/dataBase.db"
}

generator db {
    provider = "prisma-client-js"
}

model Minecraft {
    id           Int     @id @default(autoincrement())
    uuid         String  @unique @default("")
    data         String  @default("")
    data_cape    String  @default("")
    data_head    String  @default("")
    nickname     String  @default("")
    expires      BigInt  @default(0)
    default_nick String  @default("")
    valid        Boolean @default(true)
    slim         Boolean @default(false)

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @unique
}

model User {
    id                         String              @id
    username                   String              @default("")
    name                       String              @default("")
    sessions                   Sessions[]
    profile                    Minecraft?
    UserSettings               UserSettings?
    Bandage                    Bandage[]           @relation("UserBandages")
    stars                      Bandage[]           @relation("UserStars")
    joined_at                  DateTime            @default(now())
    notifications              Notifications[]     @relation("Notifications")
    has_unreaded_notifications Boolean             @default(false)
    AccessRoles                AccessRoles[]
    BandageModeration          BandageModeration[]

    subscriptions User[] @relation("UserSubs")
    subscribers   User[] @relation("UserSubs")

    // Auth providers
    DiscordAuth  DiscordAuth?
    GoogleAuth   GoogleAuth?
    TwitchAuth   TwitchAuth?
    TelegramAuth TelegramAuth?
}

model UserSettings {
    id             Int     @id @default(autoincrement())
    User           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String  @unique
    banned         Boolean @default(false)
    profile_theme  Int     @default(0)
    theme_color    String  @default("var(--main-card-color)")
    public_profile Boolean @default(true)
    skip_ppl_check Boolean @default(false)

    autoload                 Boolean @default(true)
    minecraft_main_page_skin Boolean @default(false)

    prefer_avatar String @default("")
}

// =================== AUTH PROVIDERS ===================

model DiscordAuth {
    id         Int     @id @default(autoincrement())
    discord_id String  @unique
    name       String
    username   String
    avatar_id  String?

    user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)
    userid String @unique

    connected_at DateTime @default(now())
}

model GoogleAuth {
    id    Int    @id @default(autoincrement())
    sub   String @unique
    email String

    name      String
    avatar_id String?

    user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)
    userid String @unique

    connected_at DateTime @default(now())
}

model TwitchAuth {
    id    Int    @id @default(autoincrement())
    uid   String @unique
    login String

    name      String
    avatar_id String?

    user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)
    userid String @unique

    connected_at DateTime @default(now())
}

model TelegramAuth {
    id          Int    @id @default(autoincrement())
    telegram_id String @unique

    name      String
    login     String?
    avatar_id String?

    user   User   @relation(fields: [userid], references: [id], onDelete: Cascade)
    userid String @unique

    connected_at DateTime @default(now())
}

// =============== END OF AUTH PROVIDERS ================

model AccessRoles {
    id          Int    @id @default(autoincrement())
    name        String @default("Default")
    level       Int    @unique @default(0)
    users       User[]
    icon        String @default("")
    public_name String @default("")
}

model Sessions {
    id            Int      @id @default(autoincrement())
    sessionId     String   @unique @default("")
    User_Agent    String   @default("")
    User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    last_accessed DateTime @default(now())
}

model Bandage {
    id                 Int                @id @default(autoincrement())
    externalId         String             @unique @default("")
    title              String             @default("")
    description        String?            @default("")
    base64             String             @default("")
    base64_slim        String             @default("")
    split_type         Boolean            @default(false)
    User               User               @relation("UserBandages", fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    BandageModeration  BandageModeration?
    creationDate       DateTime           @default(now())
    stars              User[]             @relation("UserStars")
    tags               Tags[]             @relation("Tags")
    access_level       Int                @default(2)
    archived           Boolean            @default(false)
    accent_color       String             @default("#000000")
    relevance_modifier Int                @default(0)
    views              Int                @default(0)
    star_type          Int                @default(0)
    colorable          Boolean            @default(false)
}

model BandageModeration {
    id       Int      @id @default(autoincrement())
    type     String   @default("")
    message  String   @default("")
    is_hides Boolean  @default(true)
    is_final Boolean  @default(false)
    is_first Boolean  @default(false)
    created  DateTime @default(now())

    bandage   Bandage @relation(fields: [bandageId], references: [id], onDelete: Cascade)
    bandageId Int     @unique
    issuer    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Tags {
    id          Int       @id @default(autoincrement())
    name        String    @default("")
    name_search String    @default("")
    bandages    Bandage[] @relation("Tags")
    verified    Boolean   @default(false)
}

model Notifications {
    id            Int      @id @default(autoincrement())
    users         User[]   @relation("Notifications")
    content       String   @default("")
    author        String   @default("Система")
    type          Int      @default(0)
    creation_date DateTime @default(now())
}

model KV {
    id      Int      @id @default(autoincrement())
    key     String   @unique @default("")
    value   String   @default("")
    created DateTime @default(now())
    edited  DateTime @default(now())
}
